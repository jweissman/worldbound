{"version":3,"sources":["types/Palette.ts","util/assertNever.ts","Nav.ts","actors/WorldView.ts","scenes/Life.ts","Game.ts","models/Stack.ts","util/distance.ts","util/flip.ts","util/iota.ts","util/pick.ts","util/count.ts","models/Conway.ts","util/matrix.ts","models/Grid.ts","models/World/WorldConfig.ts","models/World/WorldSize.ts","models/World/Evolution.ts","models/World/index.ts","index.ts"],"names":["scale","dark","lo","mid","hi","toTriple","c","r","g","b","x","Error","assertNever","colorMap","rgb","concat","join","Pan","WorldView","world","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sz","lastFilled","_onScreenXStart","_onScreenXEnd","_onScreenYStart","_onScreenYEnd","ctx","y","color","fillStyle","fillRect","delta","_this2","emit","Events","PreDrawEvent","clouds","layers","rows","m","cols","n","xEnd","Math","min","yEnd","entries","forEach","_ref","_ref2","slicedToArray","grid","config","translucent","globalAlpha","i","j","x0","y0","at","engine","worldCoordsUpperLeft","screenToWorldCoordinates","Vector","worldCoordsLowerRight","canvas","clientWidth","clientHeight","cellWidth","cellHeight","pos","max","floor","Actor","NavController","game","camera","dragging","dragOrigin","pointerMoveCallback","leftClickCallback","cameraPanCallback","keyPressCallback","moveCam","direction","camMoveSpeed","getZoom","dv","Left","Right","Up","Down","move","add","createClass","key","value","cb","input","pointers","primary","on","e","sub","coordinates","worldPos","coordiantes","target","button","Input","PointerButton","console","log","window","addEventListener","z","deltaY","zoom","capture","passive","keyboard","Keys","W","A","S","D","off","Life","_Scene","worldView","nav","inherits","activate","deactivate","Scene","Game","_Engine","backgroundColor","Color","Black","pageScrollPreventionMode","ScrollPreventionMode","None","addScene","assertThisInitialized","goToScene","evolve","Engine","Stack","distance","x1","x2","y1","y2","abs","flip","a","weight","arguments","length","undefined","random","indexSpaces","iota","nums","push","pick","_len","list","Array","_key","count","property","reduce","acc","curr","simpleConway","birth","lonely","starve","cell","neighbors","active","ns","Boolean","conway","eachMatrixCoordinate","fn","GridStructure","elements","BitArray","elems","reset","elem","idx","set","get","addr","toggle","Grid","initFn","structure","loc","put","dims","location","withinBounds","_this3","newStructure","_this4","dx","dy","empty","radius","community","neighborCells","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","val","err","return","books","judgment","gatherNeighbors","death","life","_this5","cellCallback","judgeCell","fz","eps","gol","_location","ratio","neighborsMap","communityMap","defaultConfig","size","waterRatio","cloudRatio","tickSeries","map","t","pow","dimensions","tiny","unit","small","medium","large","huge","gigantic","enormous","PlanetaryEvolution","smooth","water","apply","toConsumableArray","grass","trees","ocean","veg","sky","waterNeighbors","trail","path","animals","movers","stepCandidates","step","filter","s","sort","find","windPushesClouds","shift","Person","World","player","stack","ticks","evolutionarySeries","animalsWander","cloudsGather","cloudsForm","grassGrows","treesGrow","trailsDecay","assemble","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","oceanLevelsRise","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","evolved","evolution","index","interval","start"],"mappings":"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","file":"static/js/main.0ef514c1.chunk.js","sourcesContent":["import { assertNever } from \"../util/assertNever\";\r\nconst primaryColors = [\r\n    'red', 'blue', 'green', 'black', 'white'\r\n] as const;\r\nconst secondaryColors = ['brown', 'light-brown', 'dark-green', 'pink'] as const;\r\ntype Primary = typeof primaryColors[number];\r\ntype Secondary = typeof secondaryColors[number];\r\n\r\nexport type Color = Primary | Secondary\r\n\r\nlet scale = { dark: 40, lo: 80, mid: 160, hi: 240}\r\nfunction toTriple(c: Color): number[] {\r\n    let { hi, mid, lo, dark } = scale;\r\n    let r = lo, g = lo, b = lo;\r\n    switch (c) {\r\n        case 'white': r = hi; g = hi; b = hi; break;\r\n        case 'black': r = dark; g = dark; b = dark; break;\r\n        case 'blue': b = hi; break;\r\n        case 'red': r = hi; break;\r\n        case 'pink': r = hi; g= mid; b = mid; break;\r\n        case 'green': g = hi; break;\r\n        case 'brown': r = mid; g = lo; b= dark; break;\r\n        case 'light-brown': r = hi; g = mid; b = lo; break;\r\n        case 'dark-green': r = dark; g = mid; b = dark; break;\r\n        default: assertNever(c)\r\n    }\r\n\r\n    return [r,g,b]; //\r\n}\r\nlet colorMap: { [key: string]: string } = {}\r\nexport function rgb(c: Color): string {\r\n    if (!colorMap[c]) { //return colorMap[c]; }\r\n        colorMap[c] = `rgb(${toTriple(c).join(',')})`\r\n    }\r\n    return colorMap[c];\r\n}\r\n","export function assertNever(x: never): never {\r\n    throw new Error(\"Unexpected object: \" + x);\r\n}\r\n","import {\r\n    Vector,\r\n    Input,\r\n    Engine,\r\n    Camera,\r\n} from \"excalibur\";\r\n\r\nenum Pan { Up, Down, Left, Right }\r\nexport class NavController {\r\n\r\n    private dragging: boolean = false\r\n    private dragOrigin?: Vector\r\n\r\n    private pointerMoveCallback?: (pos: Vector) => any\r\n    private leftClickCallback?: (pos: Vector, holdingShift: boolean) => any\r\n    private cameraPanCallback?: () => any\r\n    private keyPressCallback?: (key: any) => any\r\n\r\n    constructor(private game: Engine, private camera: Camera) {\r\n        \r\n    }\r\n\r\n    onMove(cb: (pos: Vector) => any) {\r\n        this.pointerMoveCallback = cb\r\n    }\r\n\r\n    onLeftClick(cb: (pos: Vector, holdingShift: boolean) => any) {\r\n        this.leftClickCallback = cb\r\n    }\r\n\r\n    onCameraPan(cb: () => any) {\r\n        this.cameraPanCallback = cb\r\n    }\r\n\r\n    onKeyPress(cb: (key: any) => any) {\r\n        this.keyPressCallback = cb\r\n    }\r\n\r\n    moveCam = (direction: Pan) => {\r\n        if (this.cameraPanCallback) {\r\n            this.cameraPanCallback()\r\n        }\r\n        let camMoveSpeed = 10 * (1 / this.camera.getZoom())\r\n        let dv = new Vector(0, 0)\r\n        switch (direction) {\r\n            case Pan.Left: dv.x = -camMoveSpeed; break\r\n            case Pan.Right: dv.x = camMoveSpeed; break\r\n            case Pan.Up: dv.y = -camMoveSpeed; break\r\n            case Pan.Down: dv.y = camMoveSpeed; break\r\n        }\r\n        this.camera.move(this.camera.pos.add(dv), 0)\r\n    }\r\n\r\n\r\n    activate() {\r\n        this.game.input.pointers.primary.on('move', (e: any) => { //} Input.PointerMoveEvent) => {\r\n            if (this.dragging) {\r\n                if (this.dragOrigin) {\r\n                    this.camera.pos = this.camera.pos.add(\r\n                        this.dragOrigin.sub(e.coordinates.worldPos)\r\n                    )\r\n                }\r\n            } else {\r\n                if (this.pointerMoveCallback) {\r\n                    this.pointerMoveCallback(e.coordiantes.worldPos)\r\n                }\r\n\r\n            }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('up', () => {\r\n            if (this.dragging) { this.dragging = false; }\r\n        })\r\n\r\n        this.game.input.pointers.primary.on('down', (e: any) => { //} Input.PointerDownEvent) => {\r\n            if (e.target.button === Input.PointerButton.Left) {//} && this.leftClickCallback) {\r\n                // if (this.leftClickCallback) {\r\n                //     this.leftClickCallback(\r\n                //         e.coordinates.worldPos,\r\n                //         this.game.input.keyboard.isHeld(Input.Keys.Shift)\r\n                //     )\r\n                // } else {\r\n                    // this.moveCam()\r\n                    // this.pan\r\n                    this.camera.move(e.coordinates.worldPos, 250)\r\n                // }\r\n\r\n            } else { //if (e.target.button === Input.PointerButton.Middle ||\r\n                      // e.target.button === Input.PointerButton.Right) {\r\n                          \r\n                this.dragging = true;\r\n                this.dragOrigin = e.coordinates.worldPos //.target.pos\r\n                console.log(\"DRAG EM\", e)\r\n            }\r\n        })\r\n\r\n        window.addEventListener(\"wheel\", (e: WheelEvent) => {\r\n        // this.game.input.pointers.primary.on('wheel', (e: GameEvent<Input.WheelEvent>) => {\r\n            let z = this.camera.getZoom()\r\n            let step = 0.05\r\n            let min = 0.5, max = 2\r\n            if (e.deltaY < 0) { //}.target.deltaY < 0) {\r\n                this.camera.zoom(Math.min(z + step, max))\r\n            } else if (e.deltaY > 0) {\r\n                this.camera.zoom(Math.max(z - step, min))\r\n            }\r\n        // })\r\n            console.log('wheeee', e)\r\n        }, { capture: true, passive: false });\r\n\r\n\r\n        // let { Up, Down, Left, Right } = Orientation;\r\n\r\n        this.game.input.keyboard.on('press', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.Up || e.key === Input.Keys.W) {\r\n                this.moveCam(Pan.Up)\r\n            } else if (e.key === Input.Keys.Left || e.key === Input.Keys.A) {\r\n                this.moveCam(Pan.Left)\r\n            } else if (e.key === Input.Keys.Down || e.key === Input.Keys.S) {\r\n                this.moveCam(Pan.Down)\r\n            } else if (e.key === Input.Keys.Right || e.key === Input.Keys.D) {\r\n                this.moveCam(Pan.Right)\r\n            } else {\r\n                if (this.keyPressCallback) {\r\n                    this.keyPressCallback(e.key)\r\n                }\r\n            }\r\n        })\r\n\r\n        this.game.input.keyboard.on('hold', (e: Input.KeyEvent) => {\r\n            if (e.key === Input.Keys.Up || e.key === Input.Keys.W) {\r\n                this.moveCam(Pan.Up)\r\n            } else if (e.key === Input.Keys.Left || e.key === Input.Keys.A) {\r\n                this.moveCam(Pan.Left)\r\n            } else if (e.key === Input.Keys.Down || e.key === Input.Keys.S) {\r\n                this.moveCam(Pan.Down)\r\n            } else if (e.key === Input.Keys.Right || e.key === Input.Keys.D) {\r\n                this.moveCam(Pan.Right)\r\n            }\r\n        })\r\n    }\r\n\r\n    deactivate(): any {\r\n        this.game.input.keyboard.off('press')\r\n        this.game.input.keyboard.off('hold')\r\n        // this.game.input.pointers.primary.off('wheel') //, (e: Input.WheelEvent) => {\r\n        this.game.input.pointers.primary.off('down') //, (e: Input.WheelEvent) => {\r\n        this.game.input.pointers.primary.off('up') //, (e: Input.WheelEvent) => {\r\n    }\r\n}","import { Actor, Events, Engine, Vector } from \"excalibur\";\r\nimport { World } from \"../models/World\";\r\nimport { Color, rgb } from \"../types/Palette\";\r\n\r\nclass WorldView extends Actor {\r\n    colorMap: Color[][] = [];\r\n    sz: number = 8\r\n    lastFilled: Color | null = null;\r\n\r\n    constructor(public world: World) {\r\n        super();\r\n    }\r\n\r\n    private drawCell(\r\n        ctx: CanvasRenderingContext2D,\r\n        x: number,\r\n        y: number,\r\n        color: Color,\r\n    ) {\r\n        if (color !== this.lastFilled) {\r\n            ctx.fillStyle = rgb(color);\r\n            this.lastFilled = color;\r\n        }\r\n        ctx.fillRect(x,y,this.sz,this.sz);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, delta: number) {\r\n        this.emit('predraw', new Events.PreDrawEvent(ctx, delta, this));\r\n        let clouds = this.world.layers['clouds'] //.m\r\n        // this.world.\r\n        // if (m.length) {\r\n            this.lastFilled = null;\r\n\r\n            let frame = 3;\r\n            let rows = clouds.m, cols = clouds.n;\r\n            let x = this._onScreenXStart;\r\n            const xEnd = Math.min(this._onScreenXEnd, clouds.m-frame); \r\n            let y = this._onScreenYStart;\r\n            const yEnd = Math.min(this._onScreenYEnd, clouds.n-frame); //Math.min(this._onScreenYEnd, rows);\r\n            ctx.fillStyle='#642'\r\n            ctx.fillRect(x, y, rows * this.sz, cols * this.sz)\r\n\r\n            Object.entries(this.world.layers).forEach(([_layer, grid]) => {\r\n                if (grid.config.translucent) {\r\n                    ctx.globalAlpha = 0.6\r\n                }\r\n                let color = grid.config.color //colorFor(value)\r\n                if (color) {\r\n                    if (color !== this.lastFilled) {\r\n                        ctx.fillStyle = rgb(color);\r\n                        this.lastFilled = color;\r\n                    }\r\n                    for (let i = x; i < xEnd; i++) {\r\n                        for (let j = y; j < yEnd; j++) {\r\n                            let x0 = i, y0 = j;\r\n                            let value = grid.at({ x: x0, y: y0 })\r\n                            if (value) {\r\n                                ctx.fillRect(\r\n                                    x0 * this.sz,\r\n                                    y0 * this.sz,\r\n                                    this.sz, this.sz\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (grid.config.translucent) {\r\n                    ctx.globalAlpha = 1.0\r\n                }\r\n            })\r\n        // }\r\n        this.emit('postdraw', new Events.PreDrawEvent(ctx, delta, this));\r\n    }\r\n\r\n    update(engine: Engine, delta: number) {\r\n\r\n        const worldCoordsUpperLeft = engine.screenToWorldCoordinates(new Vector(0, 0));\r\n        const worldCoordsLowerRight = engine.screenToWorldCoordinates(new Vector(engine.canvas.clientWidth, engine.canvas.clientHeight));\r\n\r\n        let cellWidth = this.sz, cellHeight = this.sz;\r\n        let x = this.pos.x, y = this.pos.y;\r\n        this._onScreenXStart = Math.max(Math.floor((worldCoordsUpperLeft.x - x) / cellWidth) - 2, 0);\r\n        this._onScreenYStart = Math.max(Math.floor((worldCoordsUpperLeft.y - y) / cellHeight) - 2, 0);\r\n        this._onScreenXEnd = Math.max(Math.floor((worldCoordsLowerRight.x - x) / cellWidth) + 2, 0);\r\n        this._onScreenYEnd = Math.max(Math.floor((worldCoordsLowerRight.y - y) / cellHeight) + 2, 0);\r\n\r\n    }\r\n    private _onScreenXStart: number = 0;\r\n    private _onScreenXEnd: number = 9999;\r\n    private _onScreenYStart: number = 0;\r\n    private _onScreenYEnd: number = 9999;\r\n}\r\n\r\nexport default WorldView;","import WorldView from \"../actors/WorldView\";\r\nimport { Scene } from \"excalibur\";\r\nimport { Game } from \"../Game\";\r\nimport { NavController } from \"../Nav\";\r\n\r\nexport class Life extends Scene {\r\n    private worldView: WorldView;\r\n    private nav: NavController;\r\n    constructor(private game: Game) {\r\n        super(game);\r\n        this.worldView = new WorldView(game.world);\r\n        this.nav = new NavController(game, this.camera)\r\n    }\r\n    onInitialize() {\r\n        this.add(this.worldView);\r\n    }\r\n    onActivate() {\r\n        this.nav.activate()\r\n    }\r\n    onDeactivate() {\r\n        this.nav.deactivate()\r\n    }\r\n}\r\n","import { Engine, ScrollPreventionMode, Color } from \"excalibur\";\r\nimport { Life } from \"./scenes/Life\";\r\nimport { World } from \"./models/World\";\r\n\r\nexport class Game extends Engine {\r\n    constructor(public world: World) {\r\n        super();\r\n        this.backgroundColor = Color.Black\r\n        this.pageScrollPreventionMode = ScrollPreventionMode.None; //.None;\r\n        this.addScene('life', new Life(this))\r\n        this.goToScene('life')\r\n\r\n        console.log(\"W O R L D     B O U N D\")\r\n        console.log(\"Are you ready???\")\r\n    }\r\n\r\n    onPreUpdate() {\r\n        this.world.evolve()\r\n    }\r\n}","import Grid from \"../models/Grid\";\r\n\r\nexport type StackLayers = {\r\n    water: Grid,\r\n    grass: Grid,\r\n    trees: Grid,\r\n    animals: Grid,\r\n    clouds: Grid,\r\n    trail: Grid,\r\n    path: Grid,\r\n}\r\n\r\nclass Stack {\r\n    constructor(public layers: StackLayers) {};\r\n}\r\n\r\nexport default Stack;","// const _euclid = (x1: number, x2: number, y1: number, y2: number): number => {\r\n//     let a = x1 - x2;\r\n//     let b = y1 - y2;\r\n//     let c = Math.sqrt(a*a + b*b);\r\n//     return c;\r\n// }\r\nconst manhattan = (x1: number, x2: number, y1: number, y2: number): number => {\r\n    let dx = Math.abs(x1 - x2)\r\n    let dy = Math.abs(y1 - y2)\r\n    return dx - dy;\r\n}\r\n\r\nexport const distance = manhattan;\r\n// (x1: number, x2: number, y1: number, y2: number): number => {\r\n// }\r\n","export function flip<T>(a: T, b: T, weight: number = 0.5): T { return Math.random() < weight ? a : b; }\r\n","const indexSpaces: { [key: number]: number[] } = {}\r\nexport const iota = (i: number) => {\r\n    if (!indexSpaces[i]) {\r\n        let nums = [];\r\n        for (let j = 0; j <= i; j++) {\r\n            nums.push(j);\r\n        }\r\n        indexSpaces[i] = nums;\r\n    }\r\n    return indexSpaces[i];\r\n};\r\n","export function pick<T>(...list: T[]): T {\r\n    let idx = Math.floor(Math.random() * list.length);\r\n    return list[idx];\r\n}","export function count(list: boolean[], property: (t: boolean) => boolean) {\r\n    return list.reduce((acc, curr) => property(curr) ? ++acc : acc, 0);\r\n}","import { Location } from '../types/Location';\r\nimport { count } from '../util/count';\r\n\r\nexport type ConwayConfig = {\r\n    active: boolean,\r\n    neighbors: boolean[],\r\n    birth: number,\r\n    lonely: number,\r\n    starve: number,\r\n}\r\nexport type Conway = 'birth' | 'death' | 'unchanged'\r\n\r\nexport type ConwayCallback = (value: boolean, neighbors: boolean[], location: Location) => Conway | undefined;\r\n\r\nfunction conway({ active, neighbors, birth, lonely, starve }: ConwayConfig): Conway {\r\n    let ns = count(neighbors, Boolean)\r\n    if (active) {\r\n        if (ns <= lonely || ns >= starve) {\r\n            return 'death';\r\n        }\r\n    } else {\r\n        if (ns === birth) {\r\n            return 'birth';\r\n        }\r\n    }\r\n    return 'unchanged';\r\n}\r\n\r\nexport function simpleConway(\r\n    birth: number = 3,\r\n    lonely: number = 1,\r\n    starve: number = 4\r\n): ConwayCallback {\r\n    return (cell: boolean, neighbors: boolean[]) => {\r\n        return conway({\r\n            active: cell,\r\n            neighbors,\r\n            birth,\r\n            lonely,\r\n            starve,\r\n        });\r\n    };\r\n}","import { iota } from './iota';\r\n\r\nexport function matrix<T>(\r\n    m: number,\r\n    n: number,\r\n    fn: (location: {x: number, y: number}) => T,\r\n): (T)[][] {\r\n    return iota(m).map(i => iota(n).map((j) => {\r\n        let elem = fn({x: i, y: j});\r\n        return elem;\r\n    }));\r\n}\r\n\r\nexport function matrixWithBackingArray<T>(\r\n    m: number,\r\n    n: number,\r\n    backingArray: T[],\r\n    fn: (x: number, y: number) => T,\r\n): (number)[][] {\r\n    let theMatrix = iota(m).map(i => iota(n).map((j) => {\r\n        let elem = fn(i, j);\r\n        backingArray.push(elem);\r\n        return backingArray.length - 1;\r\n    }));\r\n    console.log(\"constructed matrix\", { theMatrix, zeroth: theMatrix[0][0] })\r\n    return theMatrix;\r\n}\r\n\r\n// export function eachMatrixCoordinate...\r\n\r\nexport function eachMatrixEntry<T>(\r\n    m: T[][],\r\n    fn: (cell: T, i: number, j: number) => any\r\n): void {\r\n    for (let i=0; i<m.length; i++) {\r\n        for (let j=0; j<m[i].length; j++) {\r\n            fn(m[i][j], i, j);\r\n        }\r\n    }\r\n}\r\nexport function eachMatrixCoordinate<T>(\r\n    m: number,\r\n    n: number,\r\n    // m: T[][],\r\n    fn: (i: number, j: number) => any\r\n): void {\r\n    for (let i=0; i<m; i++) {\r\n        for (let j=0; j<n; j++) {\r\n            fn(i, j);\r\n        }\r\n    }\r\n}\r\n","import { distance } from '../util/distance';\r\nimport { Location } from '../types/Location';\r\nimport { Color } from '../types/Palette';\r\nimport { flip } from '../util/flip';\r\nimport { iota } from '../util/iota';\r\nimport { pick } from '../util/pick';\r\nimport BitArray from 'bit-array';\r\nimport { Conway, ConwayCallback, simpleConway } from './Conway';\r\nimport { eachMatrixCoordinate } from '../util/matrix';\r\n\r\ninterface GridConfig {\r\n    initFn: (location: Location) => boolean\r\n    color?: Color\r\n    translucent?: boolean\r\n}\r\n\r\nclass GridStructure {\r\n    private elements: BitArray // 224ms get on 62s profile\r\n    constructor(private m: number, private n: number) {\r\n        this.elements = new BitArray(m*n) //(m-1)*(n-1))\r\n    }\r\n\r\n    setAll(elems: boolean[]) {\r\n        // this.elements = elems;\r\n        this.elements.reset()\r\n        elems.forEach((elem, idx) => this.elements.set(idx, elem))\r\n    }\r\n\r\n    at(x: number, y: number): boolean {\r\n        // return this.elements[this.addr(x,y)]\r\n        return this.elements.get(this.addr(x,y));\r\n    }\r\n\r\n    set(x: number, y: number, value: boolean): void {\r\n        // this.elements[this.addr(x,y)] = value;\r\n        this.elements.set(this.addr(x,y), value);\r\n    }\r\n\r\n    flip(x: number, y: number) {\r\n        // this.set(x,y,!this.at(x,y))\r\n        this.elements.toggle(this.addr(x,y))\r\n    }\r\n\r\n    addr(x: number, y: number) {\r\n        return y * (this.m) + x;\r\n    }\r\n}\r\n\r\nexport default class Grid {\r\n    static assemble(\r\n        dims: { x: number, y: number },\r\n        color: Color,\r\n        initFn: (location: Location) => boolean = () => flip(true, false),\r\n        translucent: boolean = false,\r\n        // scale: number = 64\r\n    ) {\r\n        // console.log(\"assemble grid\", { dims, color })\r\n        let g = new Grid(\r\n            dims.x,\r\n            dims.y,\r\n            { initFn, color, translucent, }\r\n        )\r\n        // g.scale(scale)\r\n        return g\r\n    }\r\n\r\n    private structure: GridStructure\r\n    \r\n    constructor(\r\n        public m: number,\r\n        public n: number,\r\n        public config: GridConfig = {\r\n            initFn: () => flip(true, false),\r\n            color: 'red',\r\n            translucent: true,\r\n        }\r\n    ) {\r\n        this.structure = new GridStructure(m,n);\r\n        iota(m).forEach(i => iota(n).forEach((j) => {\r\n            let loc={x:i,y:j}\r\n            this.put(loc, config.initFn(loc))\r\n        }));\r\n    }\r\n\r\n    withinBounds(x: number, y: number): boolean {\r\n        let x0 = 0, y0 = 0, x1 = this.m-1, y1 = this.n-1\r\n        return x >= x0 && y >= y0 && x <= x1 && y <= y1\r\n    }\r\n\r\n    at(location: Location): boolean | undefined {\r\n        let { x, y } = location;\r\n        if (this.withinBounds(x,y)) {\r\n            return this.structure.at(x,y)\r\n        }\r\n    }\r\n\r\n    put(location: Location, value: boolean) {\r\n        let { x, y } = location;\r\n        if (this.withinBounds(x, y)) {\r\n            this.structure.set(x, y, value)\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    activate(location: Location) {\r\n        this.put(location, true)\r\n    }\r\n\r\n    deactivate(location: Location) {\r\n        this.put(location, false)\r\n    }\r\n\r\n    scale(z: number=2) {\r\n        console.log(\"SCALE\", {z })\r\n        let newStructure: GridStructure = new GridStructure(this.m, this.n)\r\n        // let newElements: boolean[] = [];\r\n        eachMatrixCoordinate(this.m, this.n, (x: number, y: number) => {\r\n            let x0 = Math.floor(x / z)\r\n            let y0 = Math.floor(y / z)\r\n            let c = this.at({ x: x0, y: y0 })\r\n            if (c !== undefined) {\r\n                newStructure.set(x,y,c)\r\n                // newElements.push(c)\r\n            }\r\n        })\r\n        this.structure = newStructure; //.setAll(newElements);\r\n        return this;\r\n    }\r\n\r\n    shift(dx: number = 0, dy: number = 0, empty: () => boolean = () => flip(true, false)) {\r\n        let newStructure: GridStructure = new GridStructure(this.m, this.n)\r\n        eachMatrixCoordinate(this.m, this.n, (x: number, y: number) => {\r\n            if (this.withinBounds(x + dx, y + dy)) {\r\n                let cell = this.at({\r\n                    x: x + dx,\r\n                    y: y + dy\r\n                })\r\n                if (cell !== undefined) {\r\n                    newStructure.set(x, y, cell)\r\n                }\r\n            } else {\r\n                newStructure.set(x,y,empty())\r\n            }\r\n        })\r\n        this.structure = newStructure;\r\n        return this;\r\n    }\r\n\r\n    static neighborsMap: Location[][][] = []\r\n    static neighbors(location: Location): Location[] {\r\n        let { x, y } = location;\r\n        if (Grid.neighborsMap[x] && Grid.neighborsMap[x][y]) {\r\n            return Grid.neighborsMap[x][y]\r\n        } else {\r\n            let i = x, j = y;\r\n            let list = [\r\n                { x: i - 1, y: j },\r\n                { x: i,     y: j - 1 },\r\n                { x: i,     y: j + 1 },\r\n                { x: i + 1, y: j },\r\n                { x: i - 1, y: j - 1 },\r\n                { x: i - 1, y: j + 1 },\r\n                { x: i + 1, y: j - 1 },\r\n                { x: i + 1, y: j + 1 },\r\n            ];\r\n            Grid.neighborsMap[x] = Grid.neighborsMap[x] || [];\r\n            Grid.neighborsMap[x][y] = list;\r\n            return list;\r\n        }\r\n    }\r\n\r\n    static communityMap: Location[][][][] = []\r\n    static community(location: Location, radius: number): Location[] {\r\n        let {x,y} = location;\r\n        let r = radius;\r\n        if (r === 1) { return Grid.neighbors(location) }\r\n        // if (Grid.communityMap[r] && Grid.communityMap[r][x] && Grid.communityMap[r][x][y]) {\r\n        if (Grid.communityMap[x] && Grid.communityMap[x][y] && Grid.communityMap[x][y][r]) {\r\n            return Grid.communityMap[x][y][r];\r\n        } else {\r\n            let r = radius;\r\n            let list: Location[] = []\r\n            for (let i = x - r; i < x + r + 1; i++) {\r\n                for (let j = y - r; j < y + r + 1; j++) {\r\n                    // let n = this.at({ x: i, y: j });\r\n                    if (distance(i, x, j, y) <= r) {\r\n                        let loc: Location = {x,y}\r\n                        list.push(loc) //{x,y})\r\n                    }\r\n                }\r\n            }\r\n\r\n            Grid.communityMap[x] = Grid.communityMap[x] || [];\r\n            Grid.communityMap[x][y] = Grid.communityMap[x][y] || [];\r\n            Grid.communityMap[x][y][r] = list;\r\n\r\n            return list;\r\n        }\r\n    }\r\n\r\n\r\n    gatherNeighbors(location: Location, radius: number = 1): boolean[] {\r\n        if (radius < 1) { throw new Error(\"Neighborhoods must have a radius > 1\")}\r\n        let neighbors: Location[] = []\r\n        if (radius === 1) {\r\n            neighbors = Grid.neighbors(location)\r\n        } else {\r\n            neighbors = Grid.community(location, radius)\r\n        }\r\n        let neighborCells: boolean[] = [];\r\n        for (let loc of neighbors) {\r\n            let val = this.at(loc)\r\n            if (val !== undefined) {\r\n                neighborCells.push(val)\r\n            }\r\n        }\r\n        return neighborCells;\r\n    }\r\n\r\n    judgeCell(radius: number = 1, location: Location, cell: boolean, cb: ConwayCallback, books: { life: Location[], death: Location[] }) {\r\n        let neighbors: boolean[] = this.gatherNeighbors(location, radius)\r\n        let judgment: Conway | undefined = cb(cell, neighbors, location)\r\n\r\n        if (judgment) {\r\n            if (judgment === 'death') {\r\n                books.death.push(location)\r\n            } else if (judgment === 'birth') {\r\n                books.life.push(location)\r\n            }\r\n        }\r\n    }\r\n\r\n    gol(cellCallback: ConwayCallback = simpleConway(), radius: number = 1) {\r\n        let books: { life: Location[], death: Location[] } = { life: [], death: [] }\r\n        for (let i = 0; i < this.m; i++) {\r\n            for (let j = 0; j < this.n; j++) {\r\n                let x = i, y = j;\r\n                let cell = this.at({x,y})\r\n                if (cell !== undefined) {\r\n                    this.judgeCell(radius, { x, y }, cell, cellCallback, books)\r\n                }\r\n            }\r\n        }\r\n        books.life.forEach((location: Location) => {\r\n            this.activate(location)\r\n        })\r\n        books.death.forEach((location: Location) => {\r\n            this.deactivate(location)\r\n        })\r\n    }\r\n\r\n\r\n    noise(fz=0.1) {\r\n         for (let i = 0; i < this.m; i++) {\r\n            for (let j = 0; j < this.n; j++) {\r\n                if (Math.random() < fz) {\r\n                    let x = i, y = j;\r\n                    let cell = this.at({ x, y })\r\n                    if (cell !== undefined) {\r\n                        this.structure.flip(x,y) //.put({x,y}, flip(true, false))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    smooth(radius: number = pick(1, 2), eps = 0.25) {\r\n        this.gol((cell, community, _location) => {\r\n            // let community = this.gatherNeighbors(location, radius) //pick(2,3,4))\r\n            let cs = community.reduce((acc, curr) => curr ? ++acc : acc, 0)\r\n            let ratio = cs / community.length\r\n            let base = 0.5 //, eps = 0.24\r\n            if (!cell) {\r\n                if (ratio > base + eps) {\r\n                    return 'birth'\r\n                }\r\n            } else if (cell) {\r\n                if (ratio < base - eps) {\r\n                    return 'death'\r\n                }\r\n            }\r\n        }, radius)\r\n    }\r\n}","import { WorldSize } from \"./WorldSize\";\r\nimport { flip } from \"../../util/flip\";\r\nimport { pick } from \"../../util/pick\";\r\nexport type WorldConfig = {\r\n    size: WorldSize;\r\n    tickSeries: number[];\r\n    waterRatio: number;\r\n    cloudRatio: number;\r\n};\r\nexport const defaultConfig: WorldConfig = {\r\n    size: 'small',\r\n    waterRatio: 0.5,\r\n    cloudRatio: 0.38,\r\n    tickSeries: [1,1,2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31].map(t => t**2)\r\n}\r\n","const unit = 64;\r\nexport const dimensions = {\r\n    tiny:     { x: unit*2, y: unit*1 },\r\n    small:    { x: unit*4, y: unit*3 },\r\n    medium:   { x: unit*5, y: unit*4 },\r\n    large:    { x: unit*8, y: unit*6 },\r\n    huge:     { x: unit*12, y: unit*8 },\r\n    gigantic: { x: unit*16, y: unit*10 },\r\n    enormous: { x: unit*21, y: unit*9 },\r\n}\r\nexport type WorldSize = keyof typeof dimensions;\r\n","import { StackLayers } from \"../Stack\";\r\nimport { flip } from \"../../util/flip\";\r\nimport { pick } from \"../../util/pick\";\r\nimport { count } from \"../../util/count\";\r\nimport { Location } from '../../types/Location';\r\nimport { iota } from \"../../util/iota\";\r\nimport { pathToFileURL } from \"url\";\r\nimport Grid from \"../Grid\";\r\n\r\nexport type Evolution = (layers: StackLayers) => void\r\n\r\nexport class PlanetaryEvolution {\r\n    static windPushesClouds = (dx: number, dy: number) => (layers: StackLayers) => {\r\n        layers.clouds.shift(dx, dy, () => flip(true, false, 0.4));\r\n    }\r\n\r\n\r\n    static cloudsGather(layers: StackLayers): void {\r\n        let { clouds } = layers;\r\n        // clouds.noise(0.00125)\r\n        clouds.smooth(pick(1, 2, 4), 0.212)\r\n        // PlanetaryEvolution.cloudsForm(layers)\r\n    }\r\n\r\n    static oceanLevelsRise(layers: StackLayers): void {\r\n        let { water } = layers;\r\n        let radius = pick(...iota(4).map(r => r + 1)) //1,2,3,4)\r\n        let epsilon = 0.1185\r\n        water.smooth(radius, epsilon)\r\n    }\r\n\r\n    static cloudsForm(layers: StackLayers): void {\r\n        let { clouds, water } = layers;\r\n        // clouds.smooth()\r\n        clouds.gol((cell, ns, loc) => {\r\n            let neighbors = count(ns, Boolean);\r\n            if (cell) {\r\n                // if (neighbors < 1) { return 'death' }\r\n            } else {\r\n                if (neighbors > 6) { return 'birth' }\r\n                if (neighbors > 5 && water.at(loc)) {\r\n                    //     // if (Math.random() < 0.05) {\r\n                    return 'birth'\r\n                    //     // }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    static treesGrow(layers: StackLayers): void {\r\n        let { grass, clouds, water, trees } = layers;\r\n        trees.gol((cell, ns, location) => {\r\n            let neighbors = count(ns, Boolean)\r\n            let ocean = count(water.gatherNeighbors(location), Boolean)\r\n            let veg = count(grass.gatherNeighbors(location), Boolean) + neighbors\r\n            if (cell) {\r\n                if (ocean > 1) {\r\n                    return 'death'\r\n                }\r\n                // if (Math.random() < 0.02) {\r\n                //     return 'death'\r\n                // }\r\n            } else {\r\n                if (ocean == 0) {\r\n                    let chance = Math.random() < 0.1\r\n                    if (chance) {\r\n                        if (neighbors >= 1 && veg > 5) { //} && Math.random() < 0.2) { //} && Math.random() < 0.02) {\r\n                            return 'birth'\r\n                        } else {\r\n                            if (veg > 7) { //} && Math.random() < 0.01) {\r\n                                return 'birth'\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    static grassGrows(layers: StackLayers): void {\r\n        let { grass, clouds, water } = layers\r\n        grass.gol((cell, ns, location) => {\r\n            let neighbors = count(ns, Boolean)\r\n            let sky = clouds.at(location)\r\n            let ocean = water.at(location)\r\n            let waterNeighbors: number = count(water.gatherNeighbors(location), Boolean) // n => !!n)\r\n            if (cell) {\r\n                if (ocean) { return 'death'; }\r\n            } else {\r\n                if (!ocean) {\r\n                    let chance = true // Math.random() < 0.35\r\n                    if (chance) {\r\n                        if (waterNeighbors > 1 && sky) {\r\n                            clouds.deactivate(location)\r\n                            return 'birth';\r\n                        }\r\n                        if (waterNeighbors > 0 && neighbors > 0) {\r\n                            return 'birth';\r\n                        }\r\n                        if (neighbors > 2) {\r\n                            return 'birth'\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    static trailsDecay(layers: StackLayers): void {\r\n        let { trail, path } = layers;\r\n        trail.gol((cell, ns, loc) => {\r\n            if (cell) {\r\n                if (Math.random() < 0.02) {\r\n                    return 'death';\r\n                }\r\n            }\r\n        })\r\n        path.gol((cell, ns, loc) => {\r\n            if (cell) {\r\n                if (Math.random() < 0.002) {\r\n                    return 'death';\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    static animalsWander(layers: StackLayers): void {\r\n        let { animals, water, trees, grass, trail, path } = layers;\r\n        let movers: Location[] = []\r\n        animals.gol((cell, ns, loc) => {\r\n            if (cell) {\r\n                let ocean = water.at(loc)\r\n                if (ocean) {\r\n                    // console.log(\"swimming!\", { loc })\r\n                    return 'death'\r\n                }\r\n                else {\r\n                    if (Math.random() < 0.2) {\r\n                        movers.push(loc)\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        movers.forEach(location => {\r\n            let stepCandidates: Location[] = Grid.neighbors(location)\r\n            stepCandidates = stepCandidates.filter(s =>\r\n                animals.withinBounds(s.x, s.y) && !water.at(s) && !animals.at(s)\r\n            )\r\n            stepCandidates = stepCandidates.sort(() => Math.random() > 0.5 ? -1 : 1)\r\n            let step = stepCandidates.find(s => path.at(s)) ||\r\n                stepCandidates.find(s => trail.at(s))\r\n            if (!step || Math.random() < 0.2) {\r\n                step = pick(...stepCandidates)\r\n            }\r\n            if (step) {\r\n                animals.deactivate(location);\r\n                animals.activate(step);\r\n                if (Math.random() < 0.01) {\r\n                    if (trail.at(location)) {\r\n                        path.activate(location)\r\n                    } else {\r\n                        trail.activate(location)\r\n\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n}\r\n","import Stack from \"../Stack\";\r\nimport Grid from \"../Grid\";\r\nimport { WorldConfig, defaultConfig } from \"./WorldConfig\";\r\nimport { dimensions } from \"./WorldSize\";\r\nimport { flip } from \"../../util/flip\";\r\nimport { iota } from \"../../util/iota\";\r\nimport { PlanetaryEvolution, Evolution } from \"./Evolution\";\r\nimport { Location } from '../../types/Location';\r\n\r\ntype Dimensions = { x: number, y: number }\r\n\r\nclass Person {\r\n    constructor(private location: Location) {}\r\n}\r\n\r\nexport class World {\r\n    private player: Person = new Person({x:10,y:10})\r\n    private stack: Stack;\r\n    private dims: Dimensions\r\n    private ticks = 0;\r\n\r\n    private evolutionarySeries: Evolution[] = [\r\n        PlanetaryEvolution.animalsWander,\r\n        PlanetaryEvolution.cloudsGather,\r\n        PlanetaryEvolution.windPushesClouds(-1,-1),\r\n        PlanetaryEvolution.cloudsForm,\r\n        PlanetaryEvolution.grassGrows,\r\n        PlanetaryEvolution.treesGrow,\r\n        PlanetaryEvolution.trailsDecay,\r\n        // PlanetaryEvolution.oceanLevelsRise,\r\n    ]\r\n\r\n    constructor(private config: WorldConfig = defaultConfig) {\r\n        this.dims = dimensions[config.size]\r\n        this.stack = new Stack({\r\n            water: Grid.assemble(this.dims, 'blue', () => flip(true, false, config.waterRatio)),\r\n            grass: Grid.assemble(this.dims, 'green', () => false),\r\n            trees: Grid.assemble(this.dims, 'dark-green', () => false),\r\n            // attach names?\r\n            trail: Grid.assemble(this.dims, 'pink', () => false, true),\r\n            path: Grid.assemble(this.dims, 'light-brown', () => false),\r\n            animals: Grid.assemble(this.dims, 'white', () => flip(true, false, 0.1)),\r\n            clouds: Grid.assemble(this.dims, 'white', () => flip(true, false, config.cloudRatio), true),\r\n        })\r\n\r\n        let q=2, z = 3.0\r\n        let n = 0.12 * 10 ** 2\r\n        for (let j of iota(q)) {\r\n            for (let i of iota(n)) {\r\n                PlanetaryEvolution.oceanLevelsRise(this.stack.layers)\r\n                // this.evolve();\r\n                console.log(\"startup evolution I\", (i / n) * 100, j)\r\n            }\r\n            this.stack.layers.water.scale(z/q) //1.675)\r\n            for (let i of iota(n)) {\r\n                // this.evolve();\r\n                PlanetaryEvolution.oceanLevelsRise(this.stack.layers)\r\n                console.log(\"startup evolution II\", (i / n) * 100, j)\r\n            }\r\n        }\r\n    }\r\n\r\n    get layers() { return this.stack.layers; }\r\n\r\n    evolve(): boolean {\r\n        let evolved = false;\r\n        this.ticks += 1;\r\n        this.evolutionarySeries.forEach((evolution: Evolution, index: number) => {\r\n            let interval = this.config.tickSeries[index];\r\n            if (this.ticks % interval === 0) {\r\n                if (evolution) {\r\n                    evolution.call(this, this.layers);\r\n                    evolved = true;\r\n                }\r\n            }\r\n        })\r\n        return evolved;\r\n    }\r\n}","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport { Game } from './Game';\nimport { World } from './models/World';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nlet world: World = new World()\nlet game: Game = new Game(world)\n// game.backgroundColor = Color.Black.clone().lighten(0.02)\n\n// game.add(cells)\n\ngame.start()\n"],"sourceRoot":""}